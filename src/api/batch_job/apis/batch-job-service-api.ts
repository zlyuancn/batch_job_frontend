/* tslint:disable */
/* eslint-disable */
/**
 * 决定proto引用路径和rpc路由
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError
} from "../base";
import { BatchJobAdminCreateJobReq } from "../models";
import { BatchJobAdminCreateJobRsp } from "../models";
import { BatchJobAdminRegistryBizReq } from "../models";
import { BatchJobAdminRegistryBizRsp } from "../models";
import { BatchJobAdminStartJobReq } from "../models";
import { BatchJobAdminStartJobRsp } from "../models";
import { BatchJobAdminStopJobReq } from "../models";
import { BatchJobAdminStopJobRsp } from "../models";
import { BatchJobAdminUpdateBizReq } from "../models";
import { BatchJobAdminUpdateBizRsp } from "../models";
import { BatchJobAdminUpdateJobReq } from "../models";
import { BatchJobAdminUpdateJobRsp } from "../models";
import { BatchJobBizAddDataLogReq } from "../models";
import { BatchJobBizAddDataLogRsp } from "../models";
import { BatchJobBizStartJobReq } from "../models";
import { BatchJobBizStartJobRsp } from "../models";
import { BatchJobBizStopJobReq } from "../models";
import { BatchJobBizStopJobRsp } from "../models";
import { BatchJobBizUpdateJobDataReq } from "../models";
import { BatchJobBizUpdateJobDataRsp } from "../models";
import { BatchJobQueryAllBizNameReq } from "../models";
import { BatchJobQueryAllBizNameRsp } from "../models";
import { BatchJobQueryBizInfoReq } from "../models";
import { BatchJobQueryBizInfoRsp } from "../models";
import { BatchJobQueryBizListReq } from "../models";
import { BatchJobQueryBizListRsp } from "../models";
import { BatchJobQueryJobDataLogReq } from "../models";
import { BatchJobQueryJobDataLogRsp } from "../models";
import { BatchJobQueryJobInfoReq } from "../models";
import { BatchJobQueryJobInfoRsp } from "../models";
import { BatchJobQueryJobListReq } from "../models";
import { BatchJobQueryJobListRsp } from "../models";
import { BatchJobQueryJobStateInfoReq } from "../models";
import { BatchJobQueryJobStateInfoRsp } from "../models";
import { RpcStatus } from "../models";
/**
 * BatchJobServiceApi - axios parameter creator
 * @export
 */
export const BatchJobServiceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 创建任务
     * @param {BatchJobAdminCreateJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceAdminCreateJob: async (
      body: BatchJobAdminCreateJobReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceAdminCreateJob."
        );
      }
      const localVarPath = `/BatchJob/AdminCreateJob`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 业务注册
     * @param {BatchJobAdminRegistryBizReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceAdminRegistryBiz: async (
      body: BatchJobAdminRegistryBizReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceAdminRegistryBiz."
        );
      }
      const localVarPath = `/BatchJob/AdminRegistryBiz`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 启动任务
     * @param {BatchJobAdminStartJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceAdminStartJob: async (
      body: BatchJobAdminStartJobReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceAdminStartJob."
        );
      }
      const localVarPath = `/BatchJob/AdminStartJob`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 停止任务
     * @param {BatchJobAdminStopJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceAdminStopJob: async (
      body: BatchJobAdminStopJobReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceAdminStopJob."
        );
      }
      const localVarPath = `/BatchJob/AdminStopJob`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 修改业务
     * @param {BatchJobAdminUpdateBizReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceAdminUpdateBiz: async (
      body: BatchJobAdminUpdateBizReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceAdminUpdateBiz."
        );
      }
      const localVarPath = `/BatchJob/AdminUpdateBiz`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 修改任务
     * @param {BatchJobAdminUpdateJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceAdminUpdateJob: async (
      body: BatchJobAdminUpdateJobReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceAdminUpdateJob."
        );
      }
      const localVarPath = `/BatchJob/AdminUpdateJob`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 增加数据日志
     * @param {BatchJobBizAddDataLogReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceBizAddDataLog: async (
      body: BatchJobBizAddDataLogReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceBizAddDataLog."
        );
      }
      const localVarPath = `/BatchJob/BizAddDataLog`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 发送业务启动信号. 要求任务必须处于 JobStatus.WaitBizRun 状态
     * @param {BatchJobBizStartJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceBizStartJob: async (
      body: BatchJobBizStartJobReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceBizStartJob."
        );
      }
      const localVarPath = `/BatchJob/BizStartJob`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 发送停止任务信号. 一般为业务判断任务无法继续的时候
     * @param {BatchJobBizStopJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceBizStopJob: async (
      body: BatchJobBizStopJobReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceBizStopJob."
        );
      }
      const localVarPath = `/BatchJob/BizStopJob`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 更新任务数据. 要求任务必须处于 JobStatus.WaitBizRun 状态可以使用
     * @param {BatchJobBizUpdateJobDataReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceBizUpdateJobData: async (
      body: BatchJobBizUpdateJobDataReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceBizUpdateJobData."
        );
      }
      const localVarPath = `/BatchJob/BizUpdateJobData`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 查询所有业务名
     * @param {BatchJobQueryAllBizNameReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceQueryAllBizName: async (
      body: BatchJobQueryAllBizNameReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceQueryAllBizName."
        );
      }
      const localVarPath = `/BatchJob/QueryAllBizName`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 查询业务信息
     * @param {BatchJobQueryBizInfoReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceQueryBizInfo: async (
      body: BatchJobQueryBizInfoReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceQueryBizInfo."
        );
      }
      const localVarPath = `/BatchJob/QueryBizInfo`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 查询业务列表
     * @param {BatchJobQueryBizListReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceQueryBizList: async (
      body: BatchJobQueryBizListReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceQueryBizList."
        );
      }
      const localVarPath = `/BatchJob/QueryBizList`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 查询任务的数据日志
     * @param {BatchJobQueryJobDataLogReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceQueryJobDataLog: async (
      body: BatchJobQueryJobDataLogReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceQueryJobDataLog."
        );
      }
      const localVarPath = `/BatchJob/QueryJobDataLog`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 查询任务基本信息
     * @param {BatchJobQueryJobInfoReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceQueryJobInfo: async (
      body: BatchJobQueryJobInfoReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceQueryJobInfo."
        );
      }
      const localVarPath = `/BatchJob/QueryJobBaseInfo`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 查询任务列表
     * @param {BatchJobQueryJobListReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceQueryJobList: async (
      body: BatchJobQueryJobListReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceQueryJobList."
        );
      }
      const localVarPath = `/BatchJob/QueryJobList`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 查询任务状态信息, 用于获取运行中的任务的变化数据
     * @param {BatchJobQueryJobStateInfoReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchJobServiceQueryJobStateInfo: async (
      body: BatchJobQueryJobStateInfoReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling batchJobServiceQueryJobStateInfo."
        );
      }
      const localVarPath = `/BatchJob/QueryJobStateInfo`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * BatchJobServiceApi - functional programming interface
 * @export
 */
export const BatchJobServiceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 创建任务
     * @param {BatchJobAdminCreateJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceAdminCreateJob(
      body: BatchJobAdminCreateJobReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobAdminCreateJobRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceAdminCreateJob(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 业务注册
     * @param {BatchJobAdminRegistryBizReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceAdminRegistryBiz(
      body: BatchJobAdminRegistryBizReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobAdminRegistryBizRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceAdminRegistryBiz(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 启动任务
     * @param {BatchJobAdminStartJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceAdminStartJob(
      body: BatchJobAdminStartJobReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobAdminStartJobRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceAdminStartJob(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 停止任务
     * @param {BatchJobAdminStopJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceAdminStopJob(
      body: BatchJobAdminStopJobReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobAdminStopJobRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceAdminStopJob(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 修改业务
     * @param {BatchJobAdminUpdateBizReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceAdminUpdateBiz(
      body: BatchJobAdminUpdateBizReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobAdminUpdateBizRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceAdminUpdateBiz(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 修改任务
     * @param {BatchJobAdminUpdateJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceAdminUpdateJob(
      body: BatchJobAdminUpdateJobReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobAdminUpdateJobRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceAdminUpdateJob(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 增加数据日志
     * @param {BatchJobBizAddDataLogReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceBizAddDataLog(
      body: BatchJobBizAddDataLogReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobBizAddDataLogRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceBizAddDataLog(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 发送业务启动信号. 要求任务必须处于 JobStatus.WaitBizRun 状态
     * @param {BatchJobBizStartJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceBizStartJob(
      body: BatchJobBizStartJobReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobBizStartJobRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceBizStartJob(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 发送停止任务信号. 一般为业务判断任务无法继续的时候
     * @param {BatchJobBizStopJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceBizStopJob(
      body: BatchJobBizStopJobReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobBizStopJobRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceBizStopJob(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 更新任务数据. 要求任务必须处于 JobStatus.WaitBizRun 状态可以使用
     * @param {BatchJobBizUpdateJobDataReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceBizUpdateJobData(
      body: BatchJobBizUpdateJobDataReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobBizUpdateJobDataRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceBizUpdateJobData(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询所有业务名
     * @param {BatchJobQueryAllBizNameReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryAllBizName(
      body: BatchJobQueryAllBizNameReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobQueryAllBizNameRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceQueryAllBizName(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询业务信息
     * @param {BatchJobQueryBizInfoReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryBizInfo(
      body: BatchJobQueryBizInfoReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobQueryBizInfoRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceQueryBizInfo(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询业务列表
     * @param {BatchJobQueryBizListReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryBizList(
      body: BatchJobQueryBizListReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobQueryBizListRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceQueryBizList(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询任务的数据日志
     * @param {BatchJobQueryJobDataLogReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryJobDataLog(
      body: BatchJobQueryJobDataLogReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobQueryJobDataLogRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceQueryJobDataLog(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询任务基本信息
     * @param {BatchJobQueryJobInfoReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryJobInfo(
      body: BatchJobQueryJobInfoReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobQueryJobInfoRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceQueryJobInfo(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询任务列表
     * @param {BatchJobQueryJobListReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryJobList(
      body: BatchJobQueryJobListReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobQueryJobListRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceQueryJobList(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询任务状态信息, 用于获取运行中的任务的变化数据
     * @param {BatchJobQueryJobStateInfoReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryJobStateInfo(
      body: BatchJobQueryJobStateInfoReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BatchJobQueryJobStateInfoRsp>>
    > {
      const localVarAxiosArgs = await BatchJobServiceApiAxiosParamCreator(
        configuration
      ).batchJobServiceQueryJobStateInfo(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }
  };
};

/**
 * BatchJobServiceApi - factory interface
 * @export
 */
export const BatchJobServiceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary 创建任务
     * @param {BatchJobAdminCreateJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceAdminCreateJob(
      body: BatchJobAdminCreateJobReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobAdminCreateJobRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceAdminCreateJob(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 业务注册
     * @param {BatchJobAdminRegistryBizReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceAdminRegistryBiz(
      body: BatchJobAdminRegistryBizReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobAdminRegistryBizRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceAdminRegistryBiz(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 启动任务
     * @param {BatchJobAdminStartJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceAdminStartJob(
      body: BatchJobAdminStartJobReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobAdminStartJobRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceAdminStartJob(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 停止任务
     * @param {BatchJobAdminStopJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceAdminStopJob(
      body: BatchJobAdminStopJobReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobAdminStopJobRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceAdminStopJob(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 修改业务
     * @param {BatchJobAdminUpdateBizReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceAdminUpdateBiz(
      body: BatchJobAdminUpdateBizReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobAdminUpdateBizRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceAdminUpdateBiz(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 修改任务
     * @param {BatchJobAdminUpdateJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceAdminUpdateJob(
      body: BatchJobAdminUpdateJobReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobAdminUpdateJobRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceAdminUpdateJob(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 增加数据日志
     * @param {BatchJobBizAddDataLogReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceBizAddDataLog(
      body: BatchJobBizAddDataLogReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobBizAddDataLogRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceBizAddDataLog(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 发送业务启动信号. 要求任务必须处于 JobStatus.WaitBizRun 状态
     * @param {BatchJobBizStartJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceBizStartJob(
      body: BatchJobBizStartJobReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobBizStartJobRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceBizStartJob(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 发送停止任务信号. 一般为业务判断任务无法继续的时候
     * @param {BatchJobBizStopJobReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceBizStopJob(
      body: BatchJobBizStopJobReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobBizStopJobRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceBizStopJob(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 更新任务数据. 要求任务必须处于 JobStatus.WaitBizRun 状态可以使用
     * @param {BatchJobBizUpdateJobDataReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceBizUpdateJobData(
      body: BatchJobBizUpdateJobDataReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobBizUpdateJobDataRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceBizUpdateJobData(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 查询所有业务名
     * @param {BatchJobQueryAllBizNameReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryAllBizName(
      body: BatchJobQueryAllBizNameReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobQueryAllBizNameRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceQueryAllBizName(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 查询业务信息
     * @param {BatchJobQueryBizInfoReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryBizInfo(
      body: BatchJobQueryBizInfoReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobQueryBizInfoRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceQueryBizInfo(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 查询业务列表
     * @param {BatchJobQueryBizListReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryBizList(
      body: BatchJobQueryBizListReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobQueryBizListRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceQueryBizList(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 查询任务的数据日志
     * @param {BatchJobQueryJobDataLogReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryJobDataLog(
      body: BatchJobQueryJobDataLogReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobQueryJobDataLogRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceQueryJobDataLog(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 查询任务基本信息
     * @param {BatchJobQueryJobInfoReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryJobInfo(
      body: BatchJobQueryJobInfoReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobQueryJobInfoRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceQueryJobInfo(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 查询任务列表
     * @param {BatchJobQueryJobListReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryJobList(
      body: BatchJobQueryJobListReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobQueryJobListRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceQueryJobList(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary 查询任务状态信息, 用于获取运行中的任务的变化数据
     * @param {BatchJobQueryJobStateInfoReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchJobServiceQueryJobStateInfo(
      body: BatchJobQueryJobStateInfoReq,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BatchJobQueryJobStateInfoRsp>> {
      return BatchJobServiceApiFp(configuration)
        .batchJobServiceQueryJobStateInfo(body, options)
        .then(request => request(axios, basePath));
    }
  };
};

/**
 * BatchJobServiceApi - object-oriented interface
 * @export
 * @class BatchJobServiceApi
 * @extends {BaseAPI}
 */
export class BatchJobServiceApi extends BaseAPI {
  /**
   *
   * @summary 创建任务
   * @param {BatchJobAdminCreateJobReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceAdminCreateJob(
    body: BatchJobAdminCreateJobReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobAdminCreateJobRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceAdminCreateJob(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 业务注册
   * @param {BatchJobAdminRegistryBizReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceAdminRegistryBiz(
    body: BatchJobAdminRegistryBizReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobAdminRegistryBizRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceAdminRegistryBiz(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 启动任务
   * @param {BatchJobAdminStartJobReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceAdminStartJob(
    body: BatchJobAdminStartJobReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobAdminStartJobRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceAdminStartJob(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 停止任务
   * @param {BatchJobAdminStopJobReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceAdminStopJob(
    body: BatchJobAdminStopJobReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobAdminStopJobRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceAdminStopJob(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 修改业务
   * @param {BatchJobAdminUpdateBizReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceAdminUpdateBiz(
    body: BatchJobAdminUpdateBizReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobAdminUpdateBizRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceAdminUpdateBiz(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 修改任务
   * @param {BatchJobAdminUpdateJobReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceAdminUpdateJob(
    body: BatchJobAdminUpdateJobReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobAdminUpdateJobRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceAdminUpdateJob(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 增加数据日志
   * @param {BatchJobBizAddDataLogReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceBizAddDataLog(
    body: BatchJobBizAddDataLogReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobBizAddDataLogRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceBizAddDataLog(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 发送业务启动信号. 要求任务必须处于 JobStatus.WaitBizRun 状态
   * @param {BatchJobBizStartJobReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceBizStartJob(
    body: BatchJobBizStartJobReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobBizStartJobRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceBizStartJob(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 发送停止任务信号. 一般为业务判断任务无法继续的时候
   * @param {BatchJobBizStopJobReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceBizStopJob(
    body: BatchJobBizStopJobReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobBizStopJobRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceBizStopJob(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 更新任务数据. 要求任务必须处于 JobStatus.WaitBizRun 状态可以使用
   * @param {BatchJobBizUpdateJobDataReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceBizUpdateJobData(
    body: BatchJobBizUpdateJobDataReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobBizUpdateJobDataRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceBizUpdateJobData(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 查询所有业务名
   * @param {BatchJobQueryAllBizNameReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceQueryAllBizName(
    body: BatchJobQueryAllBizNameReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobQueryAllBizNameRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceQueryAllBizName(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 查询业务信息
   * @param {BatchJobQueryBizInfoReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceQueryBizInfo(
    body: BatchJobQueryBizInfoReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobQueryBizInfoRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceQueryBizInfo(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 查询业务列表
   * @param {BatchJobQueryBizListReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceQueryBizList(
    body: BatchJobQueryBizListReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobQueryBizListRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceQueryBizList(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 查询任务的数据日志
   * @param {BatchJobQueryJobDataLogReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceQueryJobDataLog(
    body: BatchJobQueryJobDataLogReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobQueryJobDataLogRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceQueryJobDataLog(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 查询任务基本信息
   * @param {BatchJobQueryJobInfoReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceQueryJobInfo(
    body: BatchJobQueryJobInfoReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobQueryJobInfoRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceQueryJobInfo(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 查询任务列表
   * @param {BatchJobQueryJobListReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceQueryJobList(
    body: BatchJobQueryJobListReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobQueryJobListRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceQueryJobList(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary 查询任务状态信息, 用于获取运行中的任务的变化数据
   * @param {BatchJobQueryJobStateInfoReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BatchJobServiceApi
   */
  public async batchJobServiceQueryJobStateInfo(
    body: BatchJobQueryJobStateInfoReq,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BatchJobQueryJobStateInfoRsp>> {
    return BatchJobServiceApiFp(this.configuration)
      .batchJobServiceQueryJobStateInfo(body, options)
      .then(request => request(this.axios, this.basePath));
  }
}
